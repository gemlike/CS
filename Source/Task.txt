using System;
using System.Data.Common;
using System.Net;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.Intrinsics.Arm;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Collections;
using System.Collections.Immutable;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Security.Cryptography.X509Certificates;
using System.IO.Compression;
using Newtonsoft.Json;
using System.Threading;
using System.Threading.Tasks;
using System.Net.NetworkInformation;

namespace NgocThe

{
   
    public class Test
    {
       static bool isStop = false;
       static void Task1()
       {
            for(int i = 0; i < 10; i++)
            {
                Thread.Sleep(1000);
                if(ct.IsCancellationRequested)
                {
                    System.Console.WriteLine("STOP EVENT 1.");
                    //ct.ThrowIfCancellationRequested();
                    return;
                }
                System.Console.WriteLine("Đây là task 1.");
            }
        
       }

       static bool Task2()
       {
            for(int i = 0; i < 10; i++)
            {
                Thread.Sleep(1000);
                if(ct.IsCancellationRequested)
                {
                    System.Console.WriteLine("STOP EVENT 3.");
                    // if(!isStop)
                    // {
                        
                    //     ct.ThrowIfCancellationRequested();
                    //     isStop = true;
                    // }
                    return false;
                    
                }
                System.Console.WriteLine("Đây là task 2. Thông báo: ");
                
            }
            return true;
        
       }

        static string TestTask3(dynamic obj)
        {
            return obj[0] + "," + obj[1];
        }
       static async Task<string> Task3(string m1, string m2)
       {
            string[] str = new string[]{m1,m2};
            Task<string> tt = new Task<string>(TestTask3, str);
            tt.Start();
            await tt;
            string m = tt.Result;
            for(int i = 0; i < 5; i++)
            {
                Thread.Sleep(1000);
                if(ct.IsCancellationRequested)
                {
                    System.Console.WriteLine("STOP EVENT 3.");
                    // if(!isStop)
                    // {
                        
                    //     ct.ThrowIfCancellationRequested();
                    //     isStop = true;
                    // }
                    
                    break;
                }
                System.Console.WriteLine("Đây là task 3. " + m);
                
            }
            
            System.Console.WriteLine("Do something task 3.");
            return m;
       }
        static CancellationToken ct;
        static void Main()
        {
            isStop = false;
            Console.OutputEncoding = Encoding.UTF8;
            CancellationTokenSource cts = new CancellationTokenSource();
            ct = cts.Token;

            Task t1 = new Task(Task1);
            Task<bool> t2 = new Task<bool>(Task2);
            Task<string> t3 = Task3("hihi", "hehe");
            
            t1.Start();
            t2.Start();

            // t1.Wait();
            // t2.Wait();
            System.Console.WriteLine("Ấn 1 phím bất kỳ để kết thúc.");

            while(true)
            {
                string cs = Console.ReadLine();
                if(cs == "e")
                {
                    cts.Cancel();

                    break;
                }
                else if(cs == "q")
                {
                    break;
                }
            }
            Console.ReadKey();
        }
    }

}